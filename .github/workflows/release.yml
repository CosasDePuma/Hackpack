---
name: "Compile, bundle and release the tools"

on:
  push:         { branches: ["main"] }
  pull_request: { branches: ["main"] }

jobs:
  csharp:
    runs-on: "windows-2019"
    strategy:
      matrix:
        project:
          - "DCSyncer"
          - "Rubeus"
          - "Seatbelt"
          - "SharPersist"
          - "SharpUp"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 1
          submodules: "recursive"

      - name: "Setup MSBuild"
        uses: "microsoft/setup-msbuild@v2"

      - name: "Setup NuGeet"
        uses: "NuGet/setup-nuget@v2"

      - name: "Restore the solution"
        run: "nuget restore ${{ matrix.project }}.sln"
        working-directory: "windows/${{ matrix.project }}"

        # yamllint disable rule:indentation rule:line-length
      - name: "Pre-hooks"
        run: |
          # SharPersist
          if ('${{ matrix.project }}' -eq 'SharPersist') {
            Write-Host 'Installing SharPersist dependencies'
            if (-Not (Test-Path -Path '\packages')) {
              New-Item -ItemType Directory -Path '.\packages'
            }
            nuget install Costura.Fody -Version 3.3.3 -Source 'https://api.nuget.org/v3/index.json' -OutputDirectory '.\packages'
            nuget install TaskScheduler -Version 2.8.11 -Source 'https://api.nuget.org/v3/index.json' -OutputDirectory '.\packages'
          }
        working-directory: "windows/${{ matrix.project }}"
        if: "success() || failure()"
        # yamllint enable rule:indentation rule:line-length

      - name: "Build the solution"
        run: |
          msbuild /m /t:Build /p:Configuration=Release /p:Platform="Any CPU"
          if (-not $?) { msbuild /m /t:Build /p:Configuration=Release /p:Platform="x64" }
          Get-ChildItem -Path . -Recurse -Filter *.exe | Move-Item -Destination . -Force
        working-directory: "windows/${{ matrix.project }}"

      - name: "Archive the artifacts"
        uses: "actions/upload-artifact@v4"
        with:
          name: "${{ matrix.project }}"
          path: "windows/${{ matrix.project }}/*.exe"
          if-no-files-found: "error"

  powershell:
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        project:
          - "Get-ServiceACL"
          - "MailSniper"
          - "Powercat"
          - "PowerLurk"
          - "PowerSharpPack"
          - "PowerSploit"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 1
          submodules: "recursive"

      - name: "Copy all the PWSH scripts"
        run: |
          mkdir -p /tmp/${{ matrix.project }}
          find . -type f -name '*.ps1' -exec cp {} /tmp/${{ matrix.project }}/ \;
        working-directory: "windows/${{ matrix.project }}"

      - name: "Archive the artifacts"
        uses: "actions/upload-artifact@v4"
        with:
          name: "${{ matrix.project }}"
          path: "/tmp/${{ matrix.project }}/"
          if-no-files-found: "error"

  windows-bundle:
    runs-on: "ubuntu-latest"
    needs: ["csharp", "powershell"]
    steps:
      - name: "Download csharp artifacts"
        uses: "actions/download-artifact@v4"
        with:
          path: "/tmp/bundle/"
          pattern: "*"
          merge-multiple: false

      - name: "Remove the temporary artifacts"
        uses: "geekyeggo/delete-artifact@v5"
        with:
          name: "*"

      - name: "Extra steps"
        run: |
          # Rubeus
          echo 'Copying the Rubeus powershell version to Rubeus directory'
          cp ./PowerSharpPack/Invoke-Rubeus.ps1 ./Rubeus/

          # Seatbelt
          echo 'Copying the Seatbelt powershell version to Seatbelt directory'
          cp ./PowerSharpPack/Invoke-Seatbelt.ps1 ./Seatbelt/

          # SharPersist
          echo 'Copying the SharPersist powershell version to SharPersist directory'
          cp ./PowerSharpPack/Invoke-SharPersist.ps1 ./SharPersist/

          # SharpUp
          echo 'Copying the SharpUp powershell version to SharpUp directory'
          cp ./PowerSharpPack/Invoke-SharpUp.ps1 ./SharpUp/
        working-directory: "/tmp/bundle/"

      - name: "Upload the final artifact"
        uses: "actions/upload-artifact@v4"
        with:
          if-no-files-found: "error"
          name: "hackpack-windows.zip"
          path: "/tmp/bundle/"
          compression-level: 9

  release:
    runs-on: "ubuntu-latest"
    needs: ["windows-bundle"]
    permissions:
      contents: "write"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 1

      - name: "Download the Windows artifact"
        uses: "actions/download-artifact@v4"
        with:
          name: "hackpack-windows.zip"
          path: "/tmp/windows"

      - name: "Zip the artifacts"
        run: "/usr/bin/zip -r /tmp/hackpack-windows.zip ."
        working-directory: "/tmp/windows"

      - name: "Delete older releases"
        uses: "jay2610/delete-older-releases@1.4.0"
        with:
          keep_latest: 0
          delete_tags: true
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Release the artifacts"
        uses: "softprops/action-gh-release@v2"
        with:
          name: "ðŸŽ’ Hackpack!"
          tag_name: "latest"
          body_path: ".github/README.md"
          make_latest: true
          files: |-
            /tmp/hackpack-windows.zip
          draft: false
          prerelease: false
          token: "${{ secrets.GITHUB_TOKEN }}"
...
