---
name: "🎒 Build and release Hackpack"

on:
  push:         { branches: ["main"] }
  pull_request: { branches: ["main"] }
  schedule:     [{ cron: "0 0 1 * *" }]

jobs:

  # -------------------------------------------------
  #       CSharp (C#) Build
  # -------------------------------------------------

  csharp:
    name: "🔨 Compile ${{ matrix.project }} (${{ matrix.platform }})"
    runs-on: "windows-2022"
    strategy:
      fail-fast: false
      matrix:
        include:
          - { project: "Certify",     platform: "Any CPU" }
          - { project: "Rubeus",      platform: "Any CPU" }
          - { project: "Seatbelt",    platform: "Any CPU" }
          - { project: "SharPersist", platform: "Any CPU" }
          - { project: "SharpUp",     platform: "Any CPU" }

    steps:
      - name: "📥 Checkout code"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 1
          submodules: "recursive"

      - name: "🔧 Setup MSBuild"
        uses: "microsoft/setup-msbuild@v2"
      
      - name: "📦 Setup NuGet"
        uses: "NuGet/setup-nuget@v2"

      - name: "🛠️ Install .NET 4.0 Framework"
        run: |-
          Invoke-WebRequest -Uri "https://www.nuget.org/api/v2/package/Microsoft.NETFramework.ReferenceAssemblies.net40/1.0.3" -OutFile "${env:temp}\net4.zip"
          Expand-Archive -Force -LiteralPath "${env:temp}\net4.zip" -DestinationPath "${env:temp}\net4"
          [IO.Directory]::Delete("v4.0", $True)
          Move-Item -Force -LiteralPath "${env:temp}\net4\build\.NETFramework\v4.0" -Destination "."
        working-directory: "C:/Program Files (x86)/Reference Assemblies/Microsoft/Framework/.NETFramework"

      - name: "🔄 Restore NuGet packages"
        run: "nuget restore ${{ matrix.project }}.sln"
        working-directory: "windows/${{ matrix.project }}"

      - name: "📋 Install project-specific dependencies"
        run: |
          Write-Host "📦 Installing ${{ matrix.project }} dependencies"
          if (-Not (Test-Path ".\packages")) {
            New-Item -ItemType Directory -Path ".\packages"
          }

          # SharPersist specific packages
          if ('${{ matrix.project }}' -eq 'SharPersist') {
            nuget install Costura.Fody -Version 3.3.3 -Source 'https://api.nuget.org/v3/index.json' -OutputDirectory '.\packages'
            nuget install TaskScheduler -Version 2.8.11 -Source 'https://api.nuget.org/v3/index.json' -OutputDirectory '.\packages'
          }
        working-directory: "windows/${{ matrix.project }}"

      - name: "🏗️ Build solution"
        run: |
          $buildArgs = @('/m', '/t:Build', '/p:Configuration=Release')
          if ('${{ matrix.platform }}' -ne '') { $buildArgs += '/p:Platform=${{ matrix.platform }}' }
          msbuild @buildArgs
          New-Item -ItemType Directory -Path ".\bundle" -Force
          Get-ChildItem -Path . -Recurse -Filter *.exe | ForEach-Object {
            Write-Host "📁 Moving $($_.Name) to root directory"
            Move-Item $_.FullName .\bundle\ -Force
          }
          if(Test-Path "..\PowerSharpPack\PowerSharpBinaries\Invoke-${{ matrix.project }}.ps1") {
            Write-Host "📜 Found PowerShell version"
            Move-Item "..\PowerSharpPack\PowerSharpBinaries\Invoke-${{ matrix.project }}.ps1" .\bundle\ -Force
          }
        working-directory: "windows/${{ matrix.project }}"

      - name: "📤 Upload artifacts"
        uses: "actions/upload-artifact@v4"
        with:
          name: "${{ matrix.project }}"
          path: "windows/${{ matrix.project }}/bundle/"
          if-no-files-found: "error"

  # -------------------------------------------------
  #       PowerShell (PWSH) Scripts
  # -------------------------------------------------

  powershell:
    name: "📜 PowerShell Scripts"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
      matrix:
        project:
          - "Get-ServiceACL"
          - "MailSniper"
          - "Powercat"
          - "PowerLurk"
          - "PowerSharpPack"
          - "PowerSploit"
    
    steps:
      - name: "📥 Checkout code"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 1
          submodules: "recursive"

      - name: "📋 Collect PowerShell scripts"
        run: |
          echo "📜 Collecting PowerShell scripts for ${{ matrix.project }}"
          mkdir -p "/tmp/${{ matrix.project }}"
          find . -type f -name '*.ps1' -exec mv {} "/tmp/${{ matrix.project }}/" \;
        working-directory: "windows/${{ matrix.project }}"

      - name: "📤 Upload PowerShell artifacts"
        uses: "actions/upload-artifact@v4"
        with:
          name: "${{ matrix.project }}"
          path: "/tmp/${{ matrix.project }}/"
          if-no-files-found: "error"

  # -------------------------------------------------
  #       Bundle creation
  # -------------------------------------------------

  bundle-windows:
    name: "📦 Create Windows bundle"
    runs-on: "ubuntu-latest"
    needs: ["csharp", "powershell"]
    
    steps:
      - name: "📥 Download all artifacts"
        uses: "actions/download-artifact@v4"
        with:
          path: "/tmp/bundle/"
          pattern: "*"
          merge-multiple: false

      - name: "🗑️ Cleanup temporary artifacts"
        uses: "geekyeggo/delete-artifact@v5"
        with:
          name: "*"

      - name: "📦 Upload Windows bundle"
        uses: "actions/upload-artifact@v4"
        with:
          name: "hackpack-windows"
          path: "/tmp/bundle/"
          compression-level: 9
          if-no-files-found: "error"

  # -------------------------------------------------
  #       GitHub release
  # -------------------------------------------------

  release:
    name: "🚀 Create Release"
    runs-on: "ubuntu-latest"
    needs: ["bundle-windows"]
    permissions:
      contents: "write"
    
    steps:
      - name: "📥 Checkout code"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 1

      - name: "📥 Download Windows bundle"
        uses: "actions/download-artifact@v4"
        with:
          name: "hackpack-windows"
          path: "/tmp/hackpack"

      - name: "🗜️ Zip the artifacts"
        run: "/usr/bin/zip -r /tmp/hackpack-windows ."
        working-directory: "/tmp/hackpack"

      - name: "🗑️ Cleanup old releases"
        uses: "jay2610/delete-older-releases@1.4.0"
        with:
          keep_latest: 0
          delete_tags: true
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: "🚀 Create GitHub Release"
        uses: "softprops/action-gh-release@v2"
        with:
          name: "🎒 Hackpack!"
          tag_name: "latest"
          body_path: ".github/README.md"
          make_latest: true
          files: |-
            /tmp/hackpack-windows.zip
          draft: false
          prerelease: false
          token: "${{ secrets.GITHUB_TOKEN }}"
...
